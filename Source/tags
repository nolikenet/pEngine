!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BlinkTile	Renderer.cpp	/^void Renderer::BlinkTile(SDL_Renderer* renderer, SDL_Rect rect, RandomNum* rand)$/;"	f	class:Renderer
C2_AABB	Math/tinyc2.h	/^    C2_AABB,$/;"	e	enum:__anon16
C2_BARY	Math/tinyc2.c	/^#define C2_BARY(/;"	d	file:
C2_BARY2	Math/tinyc2.c	/^#define C2_BARY2(/;"	d	file:
C2_BARY3	Math/tinyc2.c	/^#define C2_BARY3(/;"	d	file:
C2_CAPSULE	Math/tinyc2.h	/^    C2_CAPSULE,$/;"	e	enum:__anon16
C2_CIRCLE	Math/tinyc2.h	/^    C2_CIRCLE,$/;"	e	enum:__anon16
C2_GJK_ITERS	Math/tinyc2.c	/^#define C2_GJK_ITERS /;"	d	file:
C2_INLINE	Math/tinyc2.h	/^#define C2_INLINE /;"	d
C2_MAX_POLYGON_VERTS	Math/tinyc2.h	/^#define C2_MAX_POLYGON_VERTS /;"	d
C2_PLANE_AT	Math/tinyc2.c	/^static C2_INLINE c2h C2_PLANE_AT( const c2Poly* p, const int i )$/;"	f	file:
C2_POLY	Math/tinyc2.h	/^    C2_POLY$/;"	e	enum:__anon16
C2_TYPE	Math/tinyc2.h	/^} C2_TYPE;$/;"	t	typeref:enum:__anon16
CC	makefile	/^CC= g++$/;"	m
CFLAG	makefile	/^CFLAG= -std=c++14 -Wall -g $/;"	m
ColorRect	Renderer.cpp	/^ColorRect::ColorRect()$/;"	f	class:ColorRect
ColorRect	Renderer.cpp	/^ColorRect::ColorRect(SDL_Rect rect, int r, int g, int b, int a)$/;"	f	class:ColorRect
Config	Utilities/Config.cpp	/^Config::Config()$/;"	f	class:Config
DrawTile	Renderer.cpp	/^void Renderer::DrawTile(SDL_Rect rect)$/;"	f	class:Renderer
FRAMES_PER_SECOND	main.cpp	/^const int FRAMES_PER_SECOND = 60;$/;"	v
FRAMEWORKS	makefile	/^FRAMEWORKS= -F\/Library\/Frameworks -F\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/System\/Library\/Frameworks\/ -framework SDL2 -framework OpenGL -framework GLUT -framework SDL2_image$/;"	m
GetImagesFromTexture	main.cpp	/^void GetImagesFromTexture()$/;"	f
Graph	Graph.cpp	/^Graph::Graph(std::vector<std::shared_ptr<MapLocation>>& locations)$/;"	f	class:Graph
INCLUDES	makefile	/^INCLUDES= -I..\/Libs\/SDL2\/include -I..\/Libs\/SDL2_image-2.0.3 -I\/usr\/local\/Cellar\/glew\/2.1.0\/include -I\/usr\/local\/Cellar\/glew\/2.1.0\/lib\/ -I\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/System\/Library\/Frameworks\/OpenGL.framework\/Headers -I..\/Libs\/rapidjson\/include$/;"	m
LTimer	LTimer.cpp	/^LTimer::LTimer() {$/;"	f	class:LTimer
MapLocation	MapLocation.cpp	/^MapLocation::MapLocation()$/;"	f	class:MapLocation
MapLocation	MapLocation.cpp	/^MapLocation::MapLocation(NodePosition pos, SDL_Rect rect)$/;"	f	class:MapLocation
NodePosition	MapLocation.cpp	/^NodePosition::NodePosition()$/;"	f	class:NodePosition
NodePosition	MapLocation.cpp	/^NodePosition::NodePosition(int x, int y)$/;"	f	class:NodePosition
RandomNum	Utility.cpp	/^RandomNum::RandomNum()$/;"	f	class:RandomNum
RenderFrame	Utilities/SpriteSheetRenderer.cpp	/^void SpriteSheetRenderer::RenderFrame(SDL_Texture* texture, const SDL_Rect* src_rect, const SDL_Rect* dest_rect)$/;"	f	class:SpriteSheetRenderer
RenderSpriteSheet	Utilities/SpriteSheetRenderer.cpp	/^bool SpriteSheetRenderer::RenderSpriteSheet(SDL_Texture* texture, char* data_path)$/;"	f	class:SpriteSheetRenderer
RenderTileMap	Renderer.cpp	/^void Renderer::RenderTileMap(vector<shared_ptr<MapLocation>>& locations)$/;"	f	class:Renderer
Renderer	Renderer.cpp	/^Renderer::Renderer()$/;"	f	class:Renderer
Renderer	Renderer.cpp	/^Renderer::Renderer(SDL_Renderer* renderer)$/;"	f	class:Renderer
SCREEN_HEIGHT	main.cpp	/^const int SCREEN_HEIGHT = 720;$/;"	v
SCREEN_WIDTH	main.cpp	/^const int SCREEN_WIDTH = 1280;$/;"	v
SOURCE	makefile	/^SOURCE= $(wildcard *.cpp) $(wildcard *\/*.cpp) $/;"	m
ShowNeighboors	Renderer.cpp	/^void Renderer::ShowNeighboors(vector<Vertex*>& nodeNeighbors)$/;"	f	class:Renderer
SpriteSheetRenderer	Utilities/SpriteSheetRenderer.cpp	/^SpriteSheetRenderer::SpriteSheetRenderer(SDL_Renderer* renderer)$/;"	f	class:SpriteSheetRenderer
TINYC2_H	Math/tinyc2.h	/^#define TINYC2_H$/;"	d
Vector2_hpp	Math/Vector2.hpp	/^#define Vector2_hpp$/;"	d
Vertex	Graph.cpp	/^Vertex::Vertex(MapLocation location)$/;"	f	class:Vertex
a	Math/tinyc2.c	/^    c2sv a, b, c, d;$/;"	m	struct:__anon3	file:
a	Math/tinyc2.h	/^    c2v a;$/;"	m	struct:__anon11
addToRenderQueue	Renderer.cpp	/^void Renderer::addToRenderQueue(SDL_Rect& rect, RGBColor color)$/;"	f	class:Renderer
b	Math/tinyc2.c	/^    c2sv a, b, c, d;$/;"	m	struct:__anon3	file:
b	Math/tinyc2.h	/^    c2v b;$/;"	m	struct:__anon11
build_path	AStarSearch.cpp	/^void build_path(Renderer* renderer, std::unique_ptr<Graph>& graph, std::shared_ptr<Vertex> start, std::shared_ptr<Vertex> end)$/;"	f
c	Math/tinyc2.c	/^    c2sv a, b, c, d;$/;"	m	struct:__anon3	file:
c	Math/tinyc2.h	/^    float c;$/;"	m	struct:__anon5
c22	Math/tinyc2.c	/^static C2_INLINE void c22( c2Simplex* s )$/;"	f	file:
c23	Math/tinyc2.c	/^static C2_INLINE void c23( c2Simplex* s )$/;"	f	file:
c2AABB	Math/tinyc2.h	/^} c2AABB;$/;"	t	typeref:struct:__anon10
c2AABBtoAABB	Math/tinyc2.c	/^int c2AABBtoAABB( c2AABB A, c2AABB B )$/;"	f
c2AABBtoAABBManifold	Math/tinyc2.c	/^void c2AABBtoAABBManifold( c2AABB A, c2AABB B, c2Manifold* m )$/;"	f
c2AABBtoCapsule	Math/tinyc2.c	/^int c2AABBtoCapsule( c2AABB A, c2Capsule B )$/;"	f
c2AABBtoCapsuleManifold	Math/tinyc2.c	/^void c2AABBtoCapsuleManifold( c2AABB A, c2Capsule B, c2Manifold* m )$/;"	f
c2AABBtoPoly	Math/tinyc2.c	/^int c2AABBtoPoly( c2AABB A, const c2Poly* B, const c2x* bx )$/;"	f
c2AABBtoPolyManifold	Math/tinyc2.c	/^void c2AABBtoPolyManifold( c2AABB A, const c2Poly* B, const c2x* bx, c2Manifold* m )$/;"	f
c2Abs	Math/tinyc2.h	/^#define c2Abs(/;"	d
c2Absv	Math/tinyc2.h	/^C2_INLINE c2v c2Absv( c2v a ) { return c2V( c2Abs( a.x ), c2Abs( a.y ) ); }$/;"	f
c2Add	Math/tinyc2.h	/^C2_INLINE c2v c2Add( c2v a, c2v b ) { a.x += b.x; a.y += b.y; return a; }$/;"	f
c2AntinormalFace	Math/tinyc2.c	/^static void c2AntinormalFace( c2Capsule cap, const c2Poly* p, c2x x, int* face_out, c2v* n_out )$/;"	f	file:
c2BBVerts	Math/tinyc2.h	/^C2_INLINE void c2BBVerts( c2v* out, c2AABB* bb )$/;"	f
c2CCW90	Math/tinyc2.h	/^C2_INLINE c2v c2CCW90( c2v a ) { c2v b; b.x = a.y; b.y = -a.x; return b; }$/;"	f
c2Capsule	Math/tinyc2.h	/^} c2Capsule;$/;"	t	typeref:struct:__anon11
c2CapsuleSupport	Math/tinyc2.c	/^static C2_INLINE c2v c2CapsuleSupport( c2Capsule A, c2v dir )$/;"	f	file:
c2CapsuletoCapsule	Math/tinyc2.c	/^int c2CapsuletoCapsule( c2Capsule A, c2Capsule B )$/;"	f
c2CapsuletoCapsuleManifold	Math/tinyc2.c	/^void c2CapsuletoCapsuleManifold( c2Capsule A, c2Capsule B, c2Manifold* m )$/;"	f
c2CapsuletoPoly	Math/tinyc2.c	/^int c2CapsuletoPoly( c2Capsule A, const c2Poly* B, const c2x* bx )$/;"	f
c2CapsuletoPolyManifold	Math/tinyc2.c	/^void c2CapsuletoPolyManifold( c2Capsule A, const c2Poly* B, const c2x* bx_ptr, c2Manifold* m )$/;"	f
c2CastRay	Math/tinyc2.c	/^int c2CastRay( c2Ray A, const void* B, const c2x* bx, C2_TYPE typeB, c2Raycast* out )$/;"	f
c2CheckFaces	Math/tinyc2.c	/^static float c2CheckFaces( const c2Poly* A, c2x ax, const c2Poly* B, c2x bx, int* face_index )$/;"	f	file:
c2Circle	Math/tinyc2.h	/^} c2Circle;$/;"	t	typeref:struct:__anon9
c2CircletoAABB	Math/tinyc2.c	/^int c2CircletoAABB( c2Circle A, c2AABB B )$/;"	f
c2CircletoAABBManifold	Math/tinyc2.c	/^void c2CircletoAABBManifold( c2Circle A, c2AABB B, c2Manifold* m )$/;"	f
c2CircletoCapsule	Math/tinyc2.c	/^int c2CircletoCapsule( c2Circle A, c2Capsule B )$/;"	f
c2CircletoCapsuleManifold	Math/tinyc2.c	/^void c2CircletoCapsuleManifold( c2Circle A, c2Capsule B, c2Manifold* m )$/;"	f
c2CircletoCircle	Math/tinyc2.c	/^int c2CircletoCircle( c2Circle A, c2Circle B )$/;"	f
c2CircletoCircleManifold	Math/tinyc2.c	/^void c2CircletoCircleManifold( c2Circle A, c2Circle B, c2Manifold* m )$/;"	f
c2CircletoPoly	Math/tinyc2.c	/^int c2CircletoPoly( c2Circle A, const c2Poly* B, const c2x* bx )$/;"	f
c2CircletoPolyManifold	Math/tinyc2.c	/^void c2CircletoPolyManifold( c2Circle A, const c2Poly* B, const c2x* bx_tr, c2Manifold* m )$/;"	f
c2Clamp	Math/tinyc2.h	/^#define c2Clamp(/;"	d
c2Clampv	Math/tinyc2.h	/^C2_INLINE c2v c2Clampv( c2v a, c2v lo, c2v hi ) { return c2Maxv( lo, c2Minv( a, hi ) ); }$/;"	f
c2Clip	Math/tinyc2.c	/^static int c2Clip( c2v* seg, c2h h )$/;"	f	file:
c2Collide	Math/tinyc2.c	/^void c2Collide( const void* A, const c2x* ax, C2_TYPE typeA, const void* B, const c2x* bx, C2_TYPE typeB, c2Manifold* m )$/;"	f
c2Collided	Math/tinyc2.c	/^int c2Collided( const void* A, const c2x* ax, C2_TYPE typeA, const void* B, const c2x* bx, C2_TYPE typeB )$/;"	f
c2Cos	Math/tinyc2.h	/^#define c2Cos(/;"	d
c2D	Math/tinyc2.c	/^static C2_INLINE c2v c2D( c2Simplex* s )$/;"	f	file:
c2Det2	Math/tinyc2.h	/^C2_INLINE float c2Det2( c2v a, c2v b ) { return a.x * b.y - a.y * b.x; }$/;"	f
c2Dist	Math/tinyc2.h	/^C2_INLINE float c2Dist( c2h h, c2v p ) { return c2Dot( h.n, p ) - h.d; }$/;"	f
c2Div	Math/tinyc2.h	/^C2_INLINE c2v c2Div( c2v a, float b ) { return c2Mulvs( a, 1.0f \/ b ); }$/;"	f
c2Dot	Math/tinyc2.h	/^C2_INLINE float c2Dot( c2v a, c2v b ) { return a.x * b.x + a.y * b.y; }$/;"	f
c2GJK	Math/tinyc2.c	/^float c2GJK( const void* A, C2_TYPE typeA, const c2x* ax_ptr, const void* B, C2_TYPE typeB, const c2x* bx_ptr, c2v* outA, c2v* outB, int use_radius )$/;"	f
c2Hmax	Math/tinyc2.h	/^C2_INLINE float c2Hmax( c2v a ) { return c2Max( a.x, a.y ); }$/;"	f
c2Hmin	Math/tinyc2.h	/^C2_INLINE float c2Hmin( c2v a ) { return c2Min( a.x, a.y ); }$/;"	f
c2Hull	Math/tinyc2.c	/^int c2Hull( c2v* verts, int count )$/;"	f
c2Impact	Math/tinyc2.h	/^#define c2Impact(/;"	d
c2Incident	Math/tinyc2.c	/^static C2_INLINE void c2Incident( c2v* incident, const c2Poly* ip, c2x ix, const c2Poly* rp, c2x rx, int re )$/;"	f	file:
c2Intersect	Math/tinyc2.h	/^C2_INLINE c2v c2Intersect( c2v a, c2v b, float da, float db ) { return c2Add( a, c2Mulvs( c2Sub( b, a ), (da \/ (da - db)) ) ); }$/;"	f
c2KeepDeep	Math/tinyc2.c	/^static void c2KeepDeep( c2v* seg, c2h h, c2Manifold* m )$/;"	f	file:
c2L	Math/tinyc2.c	/^static C2_INLINE c2v c2L( c2Simplex* s )$/;"	f	file:
c2Len	Math/tinyc2.h	/^C2_INLINE float c2Len( c2v a ) { return c2Sqrt( c2Dot( a, a ) ); }$/;"	f
c2Lerp	Math/tinyc2.h	/^C2_INLINE c2v c2Lerp( c2v a, c2v b, float t ) { return c2Add( a, c2Mulvs( c2Sub( b, a ), t ) ); }$/;"	f
c2MakePoly	Math/tinyc2.c	/^void c2MakePoly( c2Poly* p )$/;"	f
c2MakeProxy	Math/tinyc2.c	/^static C2_INLINE void c2MakeProxy( const void* shape, C2_TYPE type, c2Proxy* p )$/;"	f	file:
c2Manifold	Math/tinyc2.h	/^} c2Manifold;$/;"	t	typeref:struct:__anon15
c2Max	Math/tinyc2.h	/^#define c2Max(/;"	d
c2Maxv	Math/tinyc2.h	/^C2_INLINE c2v c2Maxv( c2v a, c2v b ) { return c2V( c2Max( a.x, b.x ), c2Max( a.y, b.y ) ); }$/;"	f
c2Min	Math/tinyc2.h	/^#define c2Min(/;"	d
c2Minv	Math/tinyc2.h	/^C2_INLINE c2v c2Minv( c2v a, c2v b ) { return c2V( c2Min( a.x, b.x ), c2Min( a.y, b.y ) ); }$/;"	f
c2Mulmm	Math/tinyc2.h	/^C2_INLINE c2m c2Mulmm( c2m a, c2m b )  { c2m c; c.x = c2Mulmv( a, b.x );  c.y = c2Mulmv( a, b.y ); return c; }$/;"	f
c2MulmmT	Math/tinyc2.h	/^C2_INLINE c2m c2MulmmT( c2m a, c2m b ) { c2m c; c.x = c2MulmvT( a, b.x ); c.y = c2MulmvT( a, b.y ); return c; }$/;"	f
c2Mulmv	Math/tinyc2.h	/^C2_INLINE c2v c2Mulmv( c2m a, c2v b ) { c2v c; c.x = a.x.x * b.x + a.y.x * b.y; c.y = a.x.y * b.x + a.y.y * b.y; return c; }$/;"	f
c2MulmvT	Math/tinyc2.h	/^C2_INLINE c2v c2MulmvT( c2m a, c2v b ) { c2v c; c.x = a.x.x * b.x + a.x.y * b.y; c.y = a.y.x * b.x + a.y.y * b.y; return c; }$/;"	f
c2Mulrr	Math/tinyc2.h	/^C2_INLINE c2r c2Mulrr( c2r a, c2r b )  { c2r c; c.c = a.c * b.c - a.s * b.s; c.s = a.s * b.c + a.c * b.s; return c; }$/;"	f
c2MulrrT	Math/tinyc2.h	/^C2_INLINE c2r c2MulrrT( c2r a, c2r b ) { c2r c; c.c = a.c * b.c + a.s * b.s; c.s = a.c * b.s - a.s * b.c; return c; }$/;"	f
c2Mulrv	Math/tinyc2.h	/^C2_INLINE c2v c2Mulrv( c2r a, c2v b )  { return c2V( a.c * b.x - a.s * b.y,  a.s * b.x + a.c * b.y ); }$/;"	f
c2MulrvT	Math/tinyc2.h	/^C2_INLINE c2v c2MulrvT( c2r a, c2v b ) { return c2V( a.c * b.x + a.s * b.y, -a.s * b.x + a.c * b.y ); }$/;"	f
c2Mulvs	Math/tinyc2.h	/^C2_INLINE c2v c2Mulvs( c2v a, float b ) { a.x *= b; a.y *= b; return a; }$/;"	f
c2Mulvv	Math/tinyc2.h	/^C2_INLINE c2v c2Mulvv( c2v a, c2v b ) { a.x *= b.x; a.y *= b.y; return a; }$/;"	f
c2Mulxh	Math/tinyc2.h	/^C2_INLINE c2h c2Mulxh( c2x a, c2h b ) { c2h c; c.n = c2Mulrv( a.r, b.n ); c.d = c2Dot( c2Mulxv( a, c2Origin( b ) ), c.n ); return c; }$/;"	f
c2MulxhT	Math/tinyc2.h	/^C2_INLINE c2h c2MulxhT( c2x a, c2h b ) { c2h c; c.n = c2MulrvT( a.r, b.n ); c.d = c2Dot( c2MulxvT( a, c2Origin( b ) ), c.n ); return c; }$/;"	f
c2Mulxv	Math/tinyc2.h	/^C2_INLINE c2v c2Mulxv( c2x a, c2v b ) { return c2Add( c2Mulrv( a.r, b ), a.p ); }$/;"	f
c2MulxvT	Math/tinyc2.h	/^C2_INLINE c2v c2MulxvT( c2x a, c2v b ) { return c2MulrvT( a.r, c2Sub( b, a.p ) ); }$/;"	f
c2Mulxx	Math/tinyc2.h	/^C2_INLINE c2x c2Mulxx( c2x a, c2x b ) { c2x c; c.r = c2Mulrr( a.r, b.r ); c.p = c2Add( c2Mulrv( a.r, b.p ), a.p ); return c; }$/;"	f
c2MulxxT	Math/tinyc2.h	/^C2_INLINE c2x c2MulxxT( c2x a, c2x b ) { c2x c; c.r = c2MulrrT( a.r, b.r ); c.p = c2MulrvT( a.r, c2Sub( b.p, a.p ) ); return c; }$/;"	f
c2Neg	Math/tinyc2.h	/^C2_INLINE c2v c2Neg( c2v a ) { return c2V( -a.x, -a.y ); }$/;"	f
c2Norm	Math/tinyc2.h	/^C2_INLINE c2v c2Norm( c2v a ) { return c2Div( a, c2Len( a ) ); }$/;"	f
c2Norms	Math/tinyc2.c	/^void c2Norms( c2v* verts, c2v* norms, int count )$/;"	f
c2Origin	Math/tinyc2.h	/^C2_INLINE c2v c2Origin( c2h h ) { return c2Mulvs( h.n, h.d ); }$/;"	f
c2Parallel	Math/tinyc2.h	/^C2_INLINE int c2Parallel( c2v a, c2v b, float kTol )$/;"	f
c2Poly	Math/tinyc2.h	/^} c2Poly;$/;"	t	typeref:struct:__anon12
c2PolytoPoly	Math/tinyc2.c	/^int c2PolytoPoly( const c2Poly* A, const c2x* ax, const c2Poly* B, const c2x* bx )$/;"	f
c2PolytoPolyManifold	Math/tinyc2.c	/^void c2PolytoPolyManifold( const c2Poly* A, const c2x* ax_ptr, const c2Poly* B, const c2x* bx_ptr, c2Manifold* m )$/;"	f
c2Project	Math/tinyc2.h	/^C2_INLINE c2v c2Project( c2h h, c2v p ) { return c2Sub( p, c2Mulvs( h.n, c2Dist( h, p ) ) ); }$/;"	f
c2Proxy	Math/tinyc2.c	/^} c2Proxy;$/;"	t	typeref:struct:__anon1	file:
c2Ray	Math/tinyc2.h	/^} c2Ray;$/;"	t	typeref:struct:__anon13
c2Raycast	Math/tinyc2.h	/^} c2Raycast;$/;"	t	typeref:struct:__anon14
c2RaytoAABB	Math/tinyc2.c	/^int c2RaytoAABB( c2Ray A, c2AABB B, c2Raycast* out )$/;"	f
c2RaytoCapsule	Math/tinyc2.c	/^int c2RaytoCapsule( c2Ray A, c2Capsule B, c2Raycast* out )$/;"	f
c2RaytoCircle	Math/tinyc2.c	/^int c2RaytoCircle( c2Ray A, c2Circle B, c2Raycast* out )$/;"	f
c2RaytoPoly	Math/tinyc2.c	/^int c2RaytoPoly( c2Ray A, const c2Poly* B, const c2x* bx_ptr, c2Raycast* out )$/;"	f
c2Rot	Math/tinyc2.h	/^C2_INLINE c2r c2Rot( float radians ) { c2r r; c2SinCos( radians, &r.s, &r.c ); return r; }$/;"	f
c2RotIdentity	Math/tinyc2.h	/^C2_INLINE c2r c2RotIdentity( ) { c2r r; r.c = 1.0f; r.s = 0; return r; }$/;"	f
c2RotX	Math/tinyc2.h	/^C2_INLINE c2v c2RotX( c2r r ) { return c2V( r.c, r.s ); }$/;"	f
c2RotY	Math/tinyc2.h	/^C2_INLINE c2v c2RotY( c2r r ) { return c2V( -r.s, r.c ); }$/;"	f
c2SidePlanes	Math/tinyc2.c	/^static int c2SidePlanes( c2v* seg, c2x x, const c2Poly* p, int e, c2h* h )$/;"	f	file:
c2Sign	Math/tinyc2.h	/^#define c2Sign(/;"	d
c2Simplex	Math/tinyc2.c	/^} c2Simplex;$/;"	t	typeref:struct:__anon3	file:
c2Sin	Math/tinyc2.h	/^#define c2Sin(/;"	d
c2SinCos	Math/tinyc2.h	/^C2_INLINE void c2SinCos( float radians, float* s, float* c ) { *c = c2Cos( radians ); *s = c2Sin( radians ); }$/;"	f
c2Skew	Math/tinyc2.h	/^C2_INLINE c2v c2Skew( c2v a ) { c2v b; b.x = -a.y; b.y = a.x; return b; }$/;"	f
c2Sqrt	Math/tinyc2.h	/^#define c2Sqrt(/;"	d
c2Sub	Math/tinyc2.h	/^C2_INLINE c2v c2Sub( c2v a, c2v b ) { a.x -= b.x; a.y -= b.y; return a; }$/;"	f
c2Support	Math/tinyc2.c	/^static C2_INLINE int c2Support( const c2v* verts, int count, c2v d )$/;"	f	file:
c2Transform	Math/tinyc2.h	/^C2_INLINE c2x c2Transform( c2v p, float radians ) { c2x x; x.r = c2Rot( radians ); x.p = p; return x; }$/;"	f
c2V	Math/tinyc2.h	/^C2_INLINE c2v c2V( float x, float y ) { c2v a; a.x = x; a.y = y; return a; }$/;"	f
c2Witness	Math/tinyc2.c	/^static C2_INLINE void c2Witness( c2Simplex* s, c2v* a, c2v* b )$/;"	f	file:
c2h	Math/tinyc2.h	/^} c2h;$/;"	t	typeref:struct:__anon8
c2m	Math/tinyc2.h	/^} c2m;$/;"	t	typeref:struct:__anon6
c2r	Math/tinyc2.h	/^} c2r;$/;"	t	typeref:struct:__anon5
c2sv	Math/tinyc2.c	/^} c2sv;$/;"	t	typeref:struct:__anon2	file:
c2v	Math/tinyc2.h	/^} c2v;$/;"	t	typeref:struct:__anon4
c2x	Math/tinyc2.h	/^} c2x;$/;"	t	typeref:struct:__anon7
c2xIdentity	Math/tinyc2.h	/^C2_INLINE c2x c2xIdentity( ) { c2x x; x.p = c2V( 0, 0 ); x.r = c2RotIdentity( ); return x; }$/;"	f
contact_points	Math/tinyc2.h	/^    c2v contact_points[ 2 ];$/;"	m	struct:__anon15
count	Math/tinyc2.c	/^    int count;$/;"	m	struct:__anon1	file:
count	Math/tinyc2.c	/^    int count;$/;"	m	struct:__anon3	file:
count	Math/tinyc2.h	/^    int count;$/;"	m	struct:__anon12
count	Math/tinyc2.h	/^    int count;$/;"	m	struct:__anon15
d	Math/tinyc2.c	/^    c2sv a, b, c, d;$/;"	m	struct:__anon3	file:
d	Math/tinyc2.h	/^    c2v d;   \/\/ direction (normalized)$/;"	m	struct:__anon13
d	Math/tinyc2.h	/^    float d; \/\/ distance to origin from plane, or ax + by = d$/;"	m	struct:__anon8
defaultColor	main.cpp	/^RGBColor defaultColor = RGBColor::black;$/;"	v
depths	Math/tinyc2.h	/^    float depths[ 2 ];$/;"	m	struct:__anon15
div	Math/tinyc2.c	/^    float div;$/;"	m	struct:__anon3	file:
fall_down	main.cpp	/^void fall_down(Renderer* renderer, SDL_Rect& object)$/;"	f
fps_timer	main.cpp	/^LTimer fps_timer;$/;"	v
frame	main.cpp	/^int frame = 0;$/;"	v
gIBO	main.cpp	/^GLuint gIBO = 0;$/;"	v
gProgramID	main.cpp	/^GLuint gProgramID = 0;$/;"	v
gVBO	main.cpp	/^GLuint gVBO = 0;$/;"	v
gVertexPos2DLocation	main.cpp	/^GLint gVertexPos2DLocation = -1;$/;"	v
generate_tilemap	main.cpp	/^void generate_tilemap(SDL_Renderer* renderer)$/;"	f
getRange	Utility.cpp	/^int RandomNum::getRange(int start, int end)$/;"	f	class:RandomNum
getTicks	LTimer.cpp	/^Uint32 LTimer::getTicks() {$/;"	f	class:LTimer
grid_locations	main.cpp	/^std::vector<std::shared_ptr<MapLocation>> grid_locations;$/;"	v
iA	Math/tinyc2.c	/^    int iA;$/;"	m	struct:__anon2	file:
iB	Math/tinyc2.c	/^    int iB;$/;"	m	struct:__anon2	file:
index_grid	Graph.cpp	/^void Graph::index_grid()$/;"	f	class:Graph
initialize	Utility.cpp	/^void RandomNum::initialize()$/;"	f	class:RandomNum
isPaused	LTimer.cpp	/^bool LTimer::isPaused() { \/\/Timer is running and paused$/;"	f	class:LTimer
isStarted	LTimer.cpp	/^bool LTimer::isStarted() {$/;"	f	class:LTimer
loadTexture	Renderer.cpp	/^SDL_Texture* Renderer::loadTexture( std::string path )$/;"	f	class:Renderer
main	main.cpp	/^int main( int argc, char* args[] )$/;"	f
max	Math/tinyc2.h	/^    c2v max;$/;"	m	struct:__anon10
min	Math/tinyc2.h	/^    c2v min;$/;"	m	struct:__anon10
move_object	main.cpp	/^void move_object(Renderer* renderer, SDL_Rect& object, SDL_Point delta_pos)$/;"	f
n	Math/tinyc2.h	/^    c2v n;   \/\/ normal of surface at impact (unit length)$/;"	m	struct:__anon14
n	Math/tinyc2.h	/^    c2v n;   \/\/ normal, normalized$/;"	m	struct:__anon8
normal	Math/tinyc2.h	/^    c2v normal;$/;"	m	struct:__anon15
norms	Math/tinyc2.h	/^    c2v norms[ C2_MAX_POLYGON_VERTS ];$/;"	m	struct:__anon12
p	Math/tinyc2.c	/^    c2v p;$/;"	m	struct:__anon2	file:
p	Math/tinyc2.h	/^    c2v p;   \/\/ position$/;"	m	struct:__anon13
p	Math/tinyc2.h	/^    c2v p;$/;"	m	struct:__anon7
p	Math/tinyc2.h	/^    c2v p;$/;"	m	struct:__anon9
parseFile	Utilities/SpriteSheetRenderer.cpp	/^Document* SpriteSheetRenderer::parseFile(char* file_path)$/;"	f	class:SpriteSheetRenderer
pause	LTimer.cpp	/^void LTimer::pause() { \/\/If the timer is running and isn't already paused$/;"	f	class:LTimer
quit	main.cpp	/^bool quit = false;$/;"	v
r	Math/tinyc2.h	/^    c2r r;$/;"	m	struct:__anon7
r	Math/tinyc2.h	/^    float r;$/;"	m	struct:__anon11
r	Math/tinyc2.h	/^    float r;$/;"	m	struct:__anon9
radius	Math/tinyc2.c	/^    float radius;$/;"	m	struct:__anon1	file:
read	Utilities/Config.cpp	/^void Config::read(const char* configFilePath)$/;"	f	class:Config
s	Math/tinyc2.h	/^    float s;$/;"	m	struct:__anon5
sA	Math/tinyc2.c	/^    c2v sA;$/;"	m	struct:__anon2	file:
sB	Math/tinyc2.c	/^    c2v sB;$/;"	m	struct:__anon2	file:
start	LTimer.cpp	/^void LTimer::start() {$/;"	f	class:LTimer
stop	LTimer.cpp	/^void LTimer::stop() {$/;"	f	class:LTimer
success	main.cpp	/^bool success = true;$/;"	v
t	Math/tinyc2.h	/^    float t; \/\/ distance along d from position p to find endpoint of ray$/;"	m	struct:__anon13
t	Math/tinyc2.h	/^    float t; \/\/ time of impact$/;"	m	struct:__anon14
u	Math/tinyc2.c	/^    float u;$/;"	m	struct:__anon2	file:
unpause	LTimer.cpp	/^void LTimer::unpause() { \/\/If the timer is running and paused$/;"	f	class:LTimer
update	Renderer.cpp	/^void Renderer::update()$/;"	f	class:Renderer
update_heuristic	AStarSearch.cpp	/^double update_heuristic(MapLocation a, MapLocation b)$/;"	f
verts	Math/tinyc2.c	/^    c2v verts[ C2_MAX_POLYGON_VERTS ];$/;"	m	struct:__anon1	file:
verts	Math/tinyc2.h	/^    c2v verts[ C2_MAX_POLYGON_VERTS ];$/;"	m	struct:__anon12
x	Math/tinyc2.h	/^    c2v x;$/;"	m	struct:__anon6
x	Math/tinyc2.h	/^    float x;$/;"	m	struct:__anon4
y	Math/tinyc2.h	/^    c2v y;$/;"	m	struct:__anon6
y	Math/tinyc2.h	/^    float y;$/;"	m	struct:__anon4
